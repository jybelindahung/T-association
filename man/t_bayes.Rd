% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/t_bayes.R
\name{t_bayes}
\alias{t_bayes}
\title{Bayesian Estimation for Bivariate Random-Effects Meta-Analysis (BRMA) Model}
\usage{
t_bayes(
  data,
  psi.prior.dist = c("half-t", "inverse-gamma"),
  ig_shape = 2.1,
  ig_scale = 1,
  half_t_df = 3,
  half_t_scale = 2.5,
  rho.prior.dist = c("fisherz", "uniform"),
  nuts_params = list(chains = 4, iter_warmup = 1000, iter_sampling = 1000, adapt_delta =
    0.99),
  verbose = TRUE,
  alpha = 0.05
)
}
\arguments{
\item{data}{A list containing transformed treatment effect estimates and corresponding standard errors for both endpoints.
Required columns: `y1`, `se1`, `y2`, `se2`.}

\item{psi.prior.dist}{Character string specifying the prior for the between-study variances.
Options:
\describe{
  \item{\code{"half-t"}}{Half-t prior on the standard deviation (\eqn{\psi}) [default].}
  \item{\code{"inverse-gamma"}}{Inverse-gamma prior on the variance (\eqn{\psi^2}).}
}}

\item{ig_shape}{Numeric. Shape parameter for the inverse-gamma prior if \code{psi.prior.dist = "inverse-gamma"}. Default is 2.1.}

\item{ig_scale}{Numeric. Scale parameter for the inverse-gamma prior if \code{psi.prior.dist = "inverse-gamma"}. Default is 1.}

\item{half_t_df}{Numeric. Degrees of freedom for the half-t prior if \code{psi.prior.dist = "half-t"}. Default is 3.}

\item{half_t_scale}{Numeric. Scale parameter for the half-t prior if \code{psi.prior.dist = "half-t"}. Default is 2.5.}

\item{rho.prior.dist}{Character string specifying the prior for the correlation parameter \eqn{\rho}.
Options:
\describe{
  \item{\code{"fisherz"}}{Fisher z-transform normal prior [default].}
  \item{\code{"uniform"}}{Uniform prior on \eqn{\rho} in [-1,1].}
}}

\item{nuts_params}{A named list of settings controlling the
  No-U-Turn Sampler (NUTS) used when fitting the model via cmdstanr.

  These settings are passed internally to the
  \code{\link[cmdstanr]{sample}} method of a
  \code{\link[cmdstanr]{CmdStanModel}} object (created via
  \code{\link[cmdstanr]{cmdstan_model}}).

  The default is:
  \preformatted{
  list(chains = 4,
    iter_warmup = 1000,
    iter_sampling = 1000,
    adapt_delta = 0.99
  )
  }
  Typical components include:
  \describe{
    \item{\code{chains}}{Integer. Number of parallel MCMC chains. Default: 4.}
    \item{\code{iter_warmup}}{Integer. Number of warm-up iterations per chain. Default: 1000.}
    \item{\code{iter_sampling}}{Integer. Number of post-warm-up sampling iterations per chain. Default: 1000.}
    \item{\code{adapt_delta}}{Numeric. Target acceptance probability for the NUTS step size adaptation.
    Higher values (closer to 1) reduce the risk of divergent transitions, at the cost of longer runtime. Default: 0.99.}
  }

  Other arguments supported by \code{\link[cmdstanr]{sample}}, such as
  \code{seed}, \code{init}, \code{max_treedepth}, can also be included.
  Any arguments not specified in \code{nuts_params} will retain the
  default values from \code{\link[cmdstanr]{sample}}.}

\item{verbose}{Logical. If \code{TRUE}, prints progress messages from Stan. Default is \code{TRUE}.}

\item{alpha}{Numeric. Significance level for posterior credible intervals. Default is 0.05.}
}
\value{
A list with two elements:
\describe{
  \item{\code{Results}}{Data frame of posterior summaries for each parameter including:
    Posterior Mean, Posterior SD, and Credible Interval.}
  \item{\code{prior_summary}}{Character vector describing the priors used for each parameter.}
}
}
\description{
Performs Bayesian estimation of the Bivariate Random-Effects Meta-Analysis (BRMA) model
using \pkg{cmdstanr}. Supports flexible prior choices for the between-study variances
(\eqn{\psi_1^2}, \eqn{\psi_2^2}) and the correlation parameter (\eqn{\rho}).
Returns posterior summaries and credible intervals.
}
\examples{
data <- list(y1 = c(0.198, -0.091, 0.345, 1.193, 0.828, 1.671, 0.152, 1.416),
             se1 = c(0.076, 0.081, 0.062, 0.387, 0.497, 0.195, 0.432, 0.254),
             y2 = c(-0.234, -0.614, -0.054, -0.670, 0.105, 1.045, -0.910, 0.485),
             se2 = c(0.465, 0.408, 0.240, 0.384, 0.239, 0.434, 0.141, 0.159))
t_bayes(data)
t_bayes(data, rho.prior.dist = "uniform")
}
